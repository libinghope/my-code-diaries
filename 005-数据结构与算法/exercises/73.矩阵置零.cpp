/*
 * @lc app=leetcode.cn id=73 lang=cpp
 *
 * [73] 矩阵置零
 *
 * https://leetcode-cn.com/problems/set-matrix-zeroes/description/
 *
 * algorithms
 * Medium (55.12%)
 * Likes:    207
 * Dislikes: 0
 * Total Accepted:    34.8K
 * Total Submissions: 63.1K
 * Testcase Example:  '[[1,1,1],[1,0,1],[1,1,1]]'
 *
 * 给定一个 m x n 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用原地算法。
 * 
 * 示例 1:
 * 
 * 输入: 
 * [
 * [1,1,1],
 * [1,0,1],
 * [1,1,1]
 * ]
 * 输出: 
 * [
 * [1,0,1],
 * [0,0,0],
 * [1,0,1]
 * ]
 * 
 * 
 * 示例 2:
 * 
 * 输入: 
 * [
 * [0,1,2,0],
 * [3,4,5,2],
 * [1,3,1,5]
 * ]
 * 输出: 
 * [
 * [0,0,0,0],
 * [0,4,5,0],
 * [0,3,1,0]
 * ]
 * 
 * 进阶:
 * 
 * 
 * 一个直接的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。
 * 一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。
 * 你能想出一个常数空间的解决方案吗？
 * 
 * 
 */

// @lc code=start
class Solution {
public:
    /*看起来很简单，但加上空间复杂度的限制，就不那么简单了
    遍历整个矩阵，如果 cell[i][j] == 0 就将第 i 行和第 j 列的第一个元素标记。
    第一行和第一列的标记是相同的，都是 cell[0][0]，所以需要一个额外的变量告知第一列
    是否被标记，同时用 cell[0][0] 继续表示第一行的标记。
    然后，从第二行第二列的元素开始遍历，如果第 r 行或者第 c 列被标记了，
    那么就将 cell[r][c] 设为 0。这里第一行和第一列的作用就相当于方法一中的
     row_set 和 column_set 。
    然后我们检查是否 cell[0][0] == 0 ，如果是则赋值第一行的元素为零。
    然后检查第一列是否被标记，如果是则赋值第一列的元素为零。
    */
    void setZeroes(vector<vector<int>>& matrix) {
        
    }
};
// @lc code=end

